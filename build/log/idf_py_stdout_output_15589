[1/10] Performing build step for 'bootloader'
[1/1] cd /home/tassio/Documents/Esp32-C-code/build/bootloader/esp-idf/esptool_py && /home/tassio/.espressif/python_env/idf5.1_py3.10_env/bin/python /home/tassio/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/tassio/Documents/Esp32-C-code/build/bootloader/bootloader.bin
Bootloader binary size 0x6810 bytes. 0x7f0 bytes (7%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/communication/i2c_slave_communication.c.obj
/home/tassio/Documents/Esp32-C-code/main/communication/i2c_slave_communication.c: In function 'i2c_slave_receive':
/home/tassio/Documents/Esp32-C-code/main/communication/i2c_slave_communication.c:68:60: warning: passing argument 2 of 'i2c_slave_read_buffer' from incompatible pointer type [-Wincompatible-pointer-types]
   68 |             int ret = i2c_slave_read_buffer(I2C_SLAVE_NUM, &data, 1, 1000/portMAX_DELAY);
      |                                                            ^~~~~
      |                                                            |
      |                                                            uint8_t ** {aka unsigned char **}
In file included from /home/tassio/Documents/Esp32-C-code/main/communication/i2c_slave_communication.c:1:
/home/tassio/esp/esp-idf/components/driver/i2c/include/driver/i2c.h:451:56: note: expected 'uint8_t *' {aka 'unsigned char *'} but argument is of type 'uint8_t **' {aka 'unsigned char **'}
  451 | int i2c_slave_read_buffer(i2c_port_t i2c_num, uint8_t *data, size_t max_size, TickType_t ticks_to_wait);
      |                                               ~~~~~~~~~^~~~
/home/tassio/Documents/Esp32-C-code/main/communication/i2c_slave_communication.c:76:55: warning: passing argument 2 of 'i2c_slave_write_buffer' from incompatible pointer type [-Wincompatible-pointer-types]
   76 |                 i2c_slave_write_buffer(I2C_SLAVE_NUM, &data, 1, 1000/portMAX_DELAY );
      |                                                       ^~~~~
      |                                                       |
      |                                                       uint8_t ** {aka unsigned char **}
/home/tassio/esp/esp-idf/components/driver/i2c/include/driver/i2c.h:434:63: note: expected 'const uint8_t *' {aka 'const unsigned char *'} but argument is of type 'uint8_t **' {aka 'unsigned char **'}
  434 | int i2c_slave_write_buffer(i2c_port_t i2c_num, const uint8_t *data, int size, TickType_t ticks_to_wait);
      |                                                ~~~~~~~~~~~~~~~^~~~
/home/tassio/Documents/Esp32-C-code/main/communication/i2c_slave_communication.c:112:12: warning: returning 'uint8_t *' {aka 'unsigned char *'} from a function with return type 'uint8_t' {aka 'unsigned char'} makes integer from pointer without a cast [-Wint-conversion]
  112 |     return data ;
      |            ^~~~
[3/8] Linking C static library esp-idf/main/libmain.a
[4/8] Generating ld/sections.ld
[5/8] Linking CXX executable Esp32-C-code.elf
[6/8] Generating binary image from built executable
esptool.py v4.7.dev2
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/tassio/Documents/Esp32-C-code/build/Esp32-C-code.bin
[7/8] cd /home/tassio/Documents/Esp32-C-code/build/esp-idf/esptool_py && /home/tassio/.espressif/python_env/idf5.1_py3.10_env/bin/python /home/tassio/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/tassio/Documents/Esp32-C-code/build/partition_table/partition-table.bin /home/tassio/Documents/Esp32-C-code/build/Esp32-C-code.bin
Esp32-C-code.bin binary size 0x30740 bytes. Smallest app partition is 0x100000 bytes. 0xcf8c0 bytes (81%) free.
[7/8] cd /home/tassio/esp/esp-idf/components/esptool_py && /home/tassio/.espressif/tools/cmake/3.24.0/bin/cmake -D IDF_PATH=/home/tassio/esp/esp-idf -D "SERIAL_TOOL=/home/tassio/.espressif/python_env/idf5.1_py3.10_env/bin/python;;/home/tassio/esp/esp-idf/components/esptool_py/esptool/esptool.py;--chip;esp32" -D "SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args" -D WORKING_DIRECTORY=/home/tassio/Documents/Esp32-C-code/build -P /home/tassio/esp/esp-idf/components/esptool_py/run_serial_tool.cmake
esptool.py --chip esp32 -p /dev/ttyACM0 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 2MB 0x1000 bootloader/bootloader.bin 0x10000 Esp32-C-code.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.7.dev2
Serial port /dev/ttyACM0
Connecting.......
Chip is ESP32-D0WD (revision v1.0)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
Crystal is 40MHz
MAC: 0c:dc:7e:62:4e:f4
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x00040fff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 26640 bytes to 16690...
Writing at 0x00001000... (50 %)
Writing at 0x0000768e... (100 %)
Wrote 26640 bytes (16690 compressed) at 0x00001000 in 0.9 seconds (effective 241.9 kbit/s)...
Hash of data verified.
Compressed 198464 bytes to 109731...
Writing at 0x00010000... (14 %)
Writing at 0x0001d0ba... (28 %)
Writing at 0x00022848... (42 %)
Writing at 0x00028849... (57 %)
Writing at 0x0002ec73... (71 %)
Writing at 0x0003681d... (85 %)
Writing at 0x0003c42e... (100 %)
Wrote 198464 bytes (109731 compressed) at 0x00010000 in 2.6 seconds (effective 618.6 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.1 seconds (effective 317.8 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...

[1/11] Performing build step for 'bootloader'
[1/1] cd /home/tassio/Documents/Esp32-C-code/build/bootloader/esp-idf/esptool_py && /home/tassio/.espressif/python_env/idf5.1_py3.10_env/bin/python /home/tassio/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/tassio/Documents/Esp32-C-code/build/bootloader/bootloader.bin
Bootloader binary size 0x6810 bytes. 0x7f0 bytes (7%) free.
[2/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/communication/i2c_slave_communication.c.obj
[3/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[4/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/communication/i2c_master_communication.c.obj
/home/tassio/Documents/Esp32-C-code/main/communication/i2c_master_communication.c: In function 'read_inputs':
/home/tassio/Documents/Esp32-C-code/main/communication/i2c_master_communication.c:35:13: warning: unused variable 'data_to_write' [-Wunused-variable]
   35 |     uint8_t data_to_write = (output_state & 0x3F) | 0xC0; // 0x3F (00111111), 0xC0 (11000000)
      |             ^~~~~~~~~~~~~
[5/9] Linking C static library esp-idf/main/libmain.a
[6/9] Generating ld/sections.ld
[7/9] Linking CXX executable Esp32-C-code.elf
[8/9] Generating binary image from built executable
esptool.py v4.7.dev2
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/tassio/Documents/Esp32-C-code/build/Esp32-C-code.bin
[9/9] cd /home/tassio/Documents/Esp32-C-code/build/esp-idf/esptool_py && /home/tassio/.espressif/python_env/idf5.1_py3.10_env/bin/python /home/tassio/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/tassio/Documents/Esp32-C-code/build/partition_table/partition-table.bin /home/tassio/Documents/Esp32-C-code/build/Esp32-C-code.bin
Esp32-C-code.bin binary size 0x30710 bytes. Smallest app partition is 0x100000 bytes. 0xcf8f0 bytes (81%) free.

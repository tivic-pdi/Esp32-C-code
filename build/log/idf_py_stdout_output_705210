[1/12] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/communication/in_ports_communication.c.obj
/home/tassio/Documents/Esp32-C-code/main/communication/in_ports_communication.c: In function 'get_input_state':
/home/tassio/Documents/Esp32-C-code/main/communication/in_ports_communication.c:18:51: warning: iteration 6 invokes undefined behavior [-Waggressive-loop-optimizations]
   18 |         state = state + (gpio_get_level(port_array[i])<< (7 - i));
      |                                         ~~~~~~~~~~^~~
/home/tassio/Documents/Esp32-C-code/main/communication/in_ports_communication.c:15:22: note: within this loop
   15 |     for(int i = 0; i < sizeof(port_array); i++){
      |                    ~~^~~~~~~~~~~~~~~~~~~~
[2/12] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[3/12] Linking C static library esp-idf/main/libmain.a
[4/12] Performing configure step for 'bootloader'
-- Building ESP-IDF components for target esp32
-- Project sdkconfig file /home/tassio/Documents/Esp32-C-code/sdkconfig
Compiler supported targets: xtensa-esp32-elf

-- Adding linker script /home/tassio/esp/esp-idf/components/soc/esp32/ld/esp32.peripherals.ld
-- App "bootloader" version: v5.1.1-dirty
-- Adding linker script /home/tassio/esp/esp-idf/components/esp_rom/esp32/ld/esp32.rom.ld
-- Adding linker script /home/tassio/esp/esp-idf/components/esp_rom/esp32/ld/esp32.rom.api.ld
-- Adding linker script /home/tassio/esp/esp-idf/components/esp_rom/esp32/ld/esp32.rom.libgcc.ld
-- Adding linker script /home/tassio/esp/esp-idf/components/esp_rom/esp32/ld/esp32.rom.newlib-funcs.ld
-- Adding linker script /home/tassio/esp/esp-idf/components/bootloader/subproject/main/ld/esp32/bootloader.ld
-- Adding linker script /home/tassio/esp/esp-idf/components/bootloader/subproject/main/ld/esp32/bootloader.rom.ld
-- Components: bootloader bootloader_support efuse esp_app_format esp_common esp_hw_support esp_rom esp_system esptool_py freertos hal log main micro-ecc newlib partition_table soc spi_flash xtensa
-- Component paths: /home/tassio/esp/esp-idf/components/bootloader /home/tassio/esp/esp-idf/components/bootloader_support /home/tassio/esp/esp-idf/components/efuse /home/tassio/esp/esp-idf/components/esp_app_format /home/tassio/esp/esp-idf/components/esp_common /home/tassio/esp/esp-idf/components/esp_hw_support /home/tassio/esp/esp-idf/components/esp_rom /home/tassio/esp/esp-idf/components/esp_system /home/tassio/esp/esp-idf/components/esptool_py /home/tassio/esp/esp-idf/components/freertos /home/tassio/esp/esp-idf/components/hal /home/tassio/esp/esp-idf/components/log /home/tassio/esp/esp-idf/components/bootloader/subproject/main /home/tassio/esp/esp-idf/components/bootloader/subproject/components/micro-ecc /home/tassio/esp/esp-idf/components/newlib /home/tassio/esp/esp-idf/components/partition_table /home/tassio/esp/esp-idf/components/soc /home/tassio/esp/esp-idf/components/spi_flash /home/tassio/esp/esp-idf/components/xtensa
-- Configuring done
-- Generating done
-- Build files have been written to: /home/tassio/Documents/Esp32-C-code/build/bootloader
[5/12] Performing build step for 'bootloader'
[1/1] cd /home/tassio/Documents/Esp32-C-code/build/bootloader/esp-idf/esptool_py && /home/tassio/.espressif/python_env/idf5.1_py3.10_env/bin/python /home/tassio/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/tassio/Documents/Esp32-C-code/build/bootloader/bootloader.bin
Bootloader binary size 0x6810 bytes. 0x7f0 bytes (7%) free.
[6/11] Completed 'bootloader'
[7/11] Generating ld/sections.ld
[8/11] Building C object CMakeFiles/Esp32-C-code.elf.dir/project_elf_src_esp32.c.obj
[9/11] Linking CXX executable Esp32-C-code.elf
[10/11] Generating binary image from built executable
esptool.py v4.7.dev2
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/tassio/Documents/Esp32-C-code/build/Esp32-C-code.bin
[11/11] cd /home/tassio/Documents/Esp32-C-code/build/esp-idf/esptool_py && /home/tassio/.espressif/python_env/idf5.1_py3.10_env/bin/python /home/tassio/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/tassio/Documents/Esp32-C-code/build/partition_table/partition-table.bin /home/tassio/Documents/Esp32-C-code/build/Esp32-C-code.bin
Esp32-C-code.bin binary size 0x30b20 bytes. Smallest app partition is 0x100000 bytes. 0xcf4e0 bytes (81%) free.
